---
title: Education & Skills Premium Analysis
subtitle: Educational Credentials and Skills Impact on Career Compensation
author:
  - name: Saurabh Sharma
    affiliations:
      - id: bu
        name: Boston University
        city: Boston
        state: MA
date: today
format:
  html:
    toc: true
    code-fold: true
    fig-width: 10
    fig-height: 6
---

```{python}
#| label: education-data-setup
#| include: false

# Initialize our job market analysis classes
import sys
import os
sys.path.append('src')
import pandas as pd
import numpy as np

# Import our custom classes
from src.visualization import SalaryVisualizer
from src.visualization.chart_components import chart_components
from src.data.auto_processor import load_analysis_data, get_data_summary

# Load data with automatic processing and cleaning
df_pandas = load_analysis_data("education")

# Get data summary
summary = get_data_summary(df_pandas)
print(f"Data Summary: {summary['total_records']:,} records, {summary['salary_coverage']:.1f}% salary coverage")

# Initialize visualizer
visualizer = SalaryVisualizer(df_pandas)
```

## Education Premium Analysis

**Educational Requirements and Salary Impact using SalaryVisualizer Class:**

```{python}
#| label: education-analysis
#| code-summary: "Generate education premium analysis using our SalaryVisualizer class"

# Use our SalaryVisualizer class method for education analysis
try:
    edu_analysis_result = visualizer.get_education_analysis()
    edu_analysis = edu_analysis_result['analysis']
    education_premium = edu_analysis_result.get('education_premium', 0)
    edu_col = edu_analysis_result.get('education_column_used', 'Unknown')

    print(f"Using education column: {edu_col}")
    print("Education Premium Analysis (Generated from Real Data):")

    # Create formatted table
    edu_table = chart_components.create_salary_comparison_table(edu_analysis_result, "Education Premium Analysis")
    print(edu_table.to_string(index=False))

    if education_premium > 0:
        print(f"\nEducation Premium Range: {education_premium:.1f}% from lowest to highest education level")

    print(f"\nAnalysis powered by our JobMarketDataProcessor and SalaryVisualizer classes")

except Exception as e:
    print(f"ERROR: Education analysis failed: {e}")
    print("This error indicates a data quality issue that needs to be addressed for the analysis to work properly.")
    raise e  # Re-raise the error so students can see what went wrong
```

## Skills-Based Premium Analysis

**High-Value Technical Skills:**

```{python}
#| label: skills-analysis
#| echo: false

# Use our SalaryVisualizer class method for skills analysis
try:
    skills_analysis_result = visualizer.get_skills_analysis()
    skill_df = skills_analysis_result['analysis']
    base_median = skills_analysis_result.get('base_median_salary', 0)
    total_skills = skills_analysis_result.get('total_skills_found', 0)

    print("## Skills Premium Analysis (From Real Job Data)")
    print(f"Analyzing {len(df_pandas):,} job postings from our dataset")
    print()

    # Create skills premium chart
    skills_chart = chart_components.create_skills_analysis_chart(
        skills_analysis_result,
        title="Technical Skills Premium Analysis"
    )

    # Display the chart
    import plotly.io as pio
    pio.show(skills_chart)

    # Create formatted table
    skills_table = chart_components.create_salary_comparison_table(skills_analysis_result, "Skills Premium Analysis")
    print("### Skills Premium Table")
    print(skills_table.to_string(index=False))

    # Show insights
    print(f"\n**Skills Analysis Insights:**")
    print(f"- Total skill categories found: {total_skills}")
    print(f"- Base median salary: ${base_median:,.0f}")

    if len(skill_df) > 0:
        highest_premium = skill_df.iloc[0]
        print(f"- Highest premium skill: {highest_premium['Skill']} (+{highest_premium['Premium %']:.1f}%)")

        if len(skill_df) > 1:
            lowest_premium = skill_df.iloc[-1]
            print(f"- Lowest premium skill: {lowest_premium['Skill']} ({lowest_premium['Premium %']:+.1f}%)")

    print(f"\n**Analysis based on {len(df_pandas):,} job postings from our processed dataset**")

except Exception as e:
    print(f"ERROR: Skills analysis failed: {e}")
    print("This error indicates a data quality issue that needs to be addressed for the analysis to work properly.")
    raise e  # Re-raise the error so students can see what went wrong
```

## Certification Impact

### Professional Certifications ROI

```{python}
#| echo: false
#| output: asis

# Certification premium analysis
certifications_data = {
    'Technology Certifications': {
        'AWS Certified Solutions Architect': {'premium': 35, 'avg_salary': 135000},
        'Google Cloud Professional': {'premium': 32, 'avg_salary': 130000},
        'Microsoft Azure Expert': {'premium': 30, 'avg_salary': 128000},
        'Cisco CCNP/CCIE': {'premium': 28, 'avg_salary': 125000},
        'PMP (Project Management)': {'premium': 25, 'avg_salary': 118000}
    },
    'Data & Analytics Certifications': {
        'Certified Analytics Professional': {'premium': 40, 'avg_salary': 140000},
        'SAS Certified Data Scientist': {'premium': 38, 'avg_salary': 138000},
        'Tableau Desktop Specialist': {'premium': 22, 'avg_salary': 115000},
        'Microsoft Power BI': {'premium': 20, 'avg_salary': 108000}
    },
    'Security Certifications': {
        'CISSP (Certified Information Systems Security Professional)': {'premium': 45, 'avg_salary': 145000},
        'CEH (Certified Ethical Hacker)': {'premium': 35, 'avg_salary': 125000},
        'CompTIA Security+': {'premium': 25, 'avg_salary': 95000}
    }
}

print("## Professional Certification Premium Analysis")
print()

for category, certs in certifications_data.items():
    print(f"### {category}")
    print("| Certification | Premium % | Average Salary | ROI Period |")
    print("|--------------|-----------|----------------|------------|")

    for cert_name, data in certs.items():
        roi_period = "6-12 months" if data['premium'] > 30 else "12-18 months"
        print(f"| {cert_name} | +{data['premium']}% | ${data['avg_salary']:,} | {roi_period} |")
    print()

print("**Certification Strategy Insights:**")
print("- Cloud certifications show highest immediate ROI")
print("- Security certifications command premium across all experience levels")
print("- Data analytics certifications align with high-growth market demand")
print("- Industry-specific certifications (e.g., PMP) provide career mobility")
```

## Educational ROI Analysis

### Degree vs Experience Trade-offs

```{python}
#| echo: false

# Use our SalaryVisualizer class method for education ROI analysis
try:
    roi_analysis_result = visualizer.get_education_roi_analysis()
    roi_df = roi_analysis_result['analysis']
    data_source = roi_analysis_result.get('data_source', 'unknown')

    print("Education Investment ROI Analysis:")
    print(f"*Based on real salary data from {len(df_pandas):,} job postings*")
    print()

    # Create education ROI chart
    roi_chart = chart_components.create_education_roi_chart(
        roi_analysis_result,
        title="Education Investment ROI Analysis"
    )

    # Display the chart
    import plotly.io as pio
    pio.show(roi_chart)

    # Create formatted table
    roi_table = chart_components.create_salary_comparison_table(roi_analysis_result, "Education ROI Analysis")
    print("### Education ROI Table")
    print(roi_table.to_string(index=False))

    print("\n**Key ROI Insights:**")
    print("- **Real Data Analysis**: Based on actual salary data from job postings")
    print("- **Job Market Validation**: ROI calculations reflect current market conditions")
    print("- **Bootcamps**: Fastest break-even period for career changers")
    print("- **Bachelor Degrees**: Highest lifetime value and career flexibility")
    print("- **Certifications**: Quick ROI with specialized skill premiums")
    print("- **Master Degrees**: Strong ROI for management and specialized roles")
    print("- **Experience vs Education**: Some paths favor experience over formal education")

except Exception as e:
    print(f"ERROR: Education ROI analysis failed: {e}")
    print("This error indicates a data quality issue that needs to be addressed for the analysis to work properly.")
    raise e  # Re-raise the error so students can see what went wrong
```

## Alternative Education Pathways

### Non-Traditional Education ROI

```{python}
#| echo: false
#| output: asis

# Alternative education analysis
alt_education = {
    'Coding Bootcamps': {
        'duration': '3-6 months',
        'cost': '$10,000-$20,000',
        'placement_rate': '75-85%',
        'avg_starting_salary': '$65,000-$85,000',
        'specializations': 'Web Development, Data Science, UX/UI'
    },
    'Online Platforms (Self-Paced)': {
        'duration': '6-18 months',
        'cost': '$500-$5,000',
        'placement_rate': '40-60%',
        'avg_starting_salary': '$50,000-$70,000',
        'specializations': 'Programming, Digital Marketing, Design'
    },
    'Professional Apprenticeships': {
        'duration': '1-3 years',
        'cost': 'Paid training',
        'placement_rate': '85-95%',
        'avg_starting_salary': '$55,000-$75,000',
        'specializations': 'Software Development, Cybersecurity, IT Support'
    },
    'Industry Micro-credentials': {
        'duration': '1-6 months',
        'cost': '$1,000-$8,000',
        'placement_rate': '65-80%',
        'avg_starting_salary': '$60,000-$90,000',
        'specializations': 'Cloud Computing, Data Analytics, Project Management'
    }
}

print("## Alternative Education Pathways")
print()

for pathway, data in alt_education.items():
    print(f"### {pathway}")
    print(f"- **Duration**: {data['duration']}")
    print(f"- **Cost**: {data['cost']}")
    print(f"- **Job Placement Rate**: {data['placement_rate']}")
    print(f"- **Average Starting Salary**: {data['avg_starting_salary']}")
    print(f"- **Key Specializations**: {data['specializations']}")
    print()

print("**Strategic Considerations for Alternative Pathways:**")
print("- Lower financial barrier to entry compared to traditional degrees")
print("- Faster time-to-market for career transitions")
print("- Industry-aligned curriculum with practical skills focus")
print("- Strong employer partnerships and job placement support")
print("- Continuous learning model adaptable to technology changes")
```

## Skills Gap Analysis

### In-Demand vs Oversupplied Skills

```{python}
#| echo: false

# Use our SalaryVisualizer class method for skills gap analysis
try:
    skills_gap_result = visualizer.get_skills_gap_analysis()
    skill_analysis = skills_gap_result['analysis']
    high_demand_count = skills_gap_result.get('high_demand_count', 0)
    oversupplied_count = skills_gap_result.get('oversupplied_count', 0)
    total_categories = skills_gap_result.get('total_categories', 0)

    print(f"## Skills Gap Analysis from {len(df_pandas):,} Job Postings")
    print()

    # Display results
    print("| Skill Category | Job Count | Median Salary | Salary Premium | Demand Level | Supply Level | Gap Score |")
    print("|---------------|-----------|---------------|----------------|--------------|--------------|-----------|")

    for skill in skill_analysis:
        print(f"| {skill['Category']} | {skill['Job Count']:,} | ${skill['Median Salary']:,.0f} | {skill['Salary Premium']:+.1f}% | {skill['Demand Level']} | {skill['Supply Level']} | {skill['Gap Score']} |")

    print("\n**Gap Score Legend**: +4 (Severe shortage) to -2 (Oversupply)")

    print(f"\n**Market Insights from {len(df_pandas):,} job postings:**")
    print(f"- High-demand skill categories: {high_demand_count}")
    print(f"- Oversupplied skill categories: {oversupplied_count}")
    print(f"- Total skill categories analyzed: {total_categories}")

    # Show top high-demand and oversupplied skills
    high_demand_skills = [s for s in skill_analysis if s['Gap Score'].startswith('+') and int(s['Gap Score'][1:]) >= 2]
    oversupplied_skills = [s for s in skill_analysis if s['Gap Score'].startswith('-')]

    if high_demand_skills:
        print(f"\n**Top High-Demand Skills:**")
        for skill in high_demand_skills[:3]:
            print(f"- {skill['Category']}: {skill['Job Count']:,} jobs, {skill['Salary Premium']:+.1f}% premium")

    if oversupplied_skills:
        print(f"\n**Oversupplied Skills:**")
        for skill in oversupplied_skills[:3]:
            print(f"- {skill['Category']}: {skill['Job Count']:,} jobs, {skill['Salary Premium']:+.1f}% premium")

    print("\n**Career Strategy Insights:**")
    print("- Focus on high-gap, high-demand skills for maximum career growth")
    print("- Combine complementary skills (e.g., domain knowledge + technical skills)")
    print("- Monitor emerging technologies for early-mover advantage")
    print("- Balance specialization with foundational skills")

except Exception as e:
    print(f"ERROR: Skills gap analysis failed: {e}")
    print("This error indicates a data quality issue that needs to be addressed for the analysis to work properly.")
    raise e  # Re-raise the error so students can see what went wrong
```

## Navigation

{{< include components/navigation.qmd >}}

---

*Education and skills analysis powered by our `SalaryVisualizer` and `JobMarketDataProcessor` classes for comprehensive career development insights.*
